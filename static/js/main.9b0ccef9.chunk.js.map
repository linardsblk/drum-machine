{"version":3,"sources":["components/DrumPad.js","components/DrumPadContainer.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","handleKeydown","event","keyCode","Number","padValues","keycode","playSound","audio","document","getElementById","key","currentTime","playPromise","play","undefined","then","_","pause","catch","error","updateDisplayText","text","activatePad","setState","padColor","setTimeout","state","bind","addEventListener","this","removeEventListener","style","backgroundColor","className","onClick","id","source","src","React","Component","DrumPadContainer","displayTextCallback","textFromDrumPad","updateText","drumPads","bank","map","el","Display","displayText","App","audioLibrary","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qhCAeqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAiBVC,cAAgB,SAACC,GACVA,GAASA,EAAMC,SACdD,EAAMC,UAAYC,OAAO,EAAKJ,MAAMK,UAAUC,UAE9C,EAAKC,aAtBM,EA2BnBA,UAAY,WACR,IAAMC,EAAQC,SAASC,eAAe,EAAKV,MAAMK,UAAUM,KAC3DH,EAAMI,YAAc,EACpB,IAAIC,EAAcL,EAAMM,YAELC,IAAhBF,GACCA,EAAYG,MAAK,SAAAC,GACbJ,EAAYK,WAEfC,OAAM,SAAAC,OAEX,EAAKpB,MAAMqB,kBAAkB,EAAKrB,MAAMK,UAAUiB,MAClD,EAAKC,eAvCU,EA0CnBA,YAAc,WACV,EAAKC,SAAS,CACVC,SAAU,YAGdC,YAAW,kBAAM,EAAKF,SAAS,CAC3BC,SAAU,gBACV,MA/CJ,EAAKE,MAAQ,CACTF,SAAU,aAEd,EAAKxB,cAAgB,EAAKA,cAAc2B,KAAnB,gBACrB,EAAKrB,UAAgB,EAAKA,UAAUqB,KAAf,gBACrB,EAAKL,YAAgB,EAAKA,YAAYK,KAAjB,gBAPN,E,iFAWfnB,SAASoB,iBAAiB,UAAWC,KAAK7B,eAAe,K,6CAIzDQ,SAASsB,oBAAoB,UAAWD,KAAK7B,eAAe,K,+BAsC5D,OACI,yBAAK+B,MAAO,CAACC,gBAAgBH,KAAKH,MAAMF,UAAWS,UAAU,WAAWC,QAASL,KAAKvB,UAAW6B,GAAIN,KAAK9B,MAAMK,UAAUgC,QACrHP,KAAK9B,MAAMK,UAAUM,IACtB,2BAAOyB,GAAIN,KAAK9B,MAAMK,UAAUM,IAAKuB,UAAU,OAAOI,IAAK,gBAAiBR,KAAK9B,MAAMK,UAAUgC,c,GAzD5EE,IAAMC,WCXtBC,E,YACjB,WAAYzC,GAAQ,IAAD,8BACf,4CAAMA,KAIV0C,oBAAsB,SAACC,GACnB,EAAK3C,MAAM4C,WAAWD,IAHtB,EAAKD,oBAAsB,EAAKA,oBAAoBd,KAAzB,gBAHZ,E,sEAST,IAAD,OACDiB,EAAWf,KAAK9B,MAAM8C,KAAKC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAS3B,kBAAmB,EAAKqB,oBAAqBN,GAAIY,EAAGrC,IAAKA,IAAKqC,EAAGrC,IAAKN,UAAW2C,OAEnI,OACI,yBAAKZ,GAAG,sBACHS,O,GAf6BN,IAAMC,WCFrC,SAASS,EAAQjD,GAC5B,OAAO,yBAAKoC,GAAG,WAAWpC,EAAMkD,a,WCMfC,G,kBACnB,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KAQRqB,kBAAoB,SAACC,GACnB,EAAKE,SAAS,CACZ0B,YAAa5B,IAGfI,YAAW,kBAAM,EAAKF,SAAS,CAC7B0B,YAAa,OACb,MAdF,EAAKvB,MAAQ,CACXmB,KAAMM,EACNF,YAAa,IAEf,EAAK7B,kBAAoB,EAAKA,kBAAkBO,KAAvB,gBANR,E,sEAoBjB,OACA,yBAAKQ,GAAG,gBACN,kBAACa,EAAD,CAASC,YAAapB,KAAKH,MAAMuB,cACjC,kBAAC,EAAD,CAAkBN,WAAYd,KAAKT,kBAAmByB,KAAMM,S,GAxBjCb,IAAMC,YCGnBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlD,SAASC,eAAe,SD2H3C,kBAAmBkD,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,kB","file":"static/js/main.9b0ccef9.chunk.js","sourcesContent":["import React from 'react';\r\n/*const style = {\r\n    fontSize: '100%',\r\n    fontFamily: 'inherit',\r\n    padding: '0',\r\n    overflow: 'visible',\r\n\r\n    backgroundColor: 'gray',\r\n    width: '100px',\r\n    height: '100px',\r\n    margin: '1px',\r\n    textAlign: 'center',\r\n    border: '1px solid black'\r\n}*/\r\n\r\nexport default class DrumPad extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            padColor: \"#eee4da59\"\r\n        }\r\n        this.handleKeydown = this.handleKeydown.bind(this);\r\n        this.playSound     = this.playSound.bind(this);\r\n        this.activatePad   = this.activatePad.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"keydown\", this.handleKeydown, false);\r\n    };\r\n    \r\n      componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.handleKeydown, false);\r\n    };\r\n    \r\n    handleKeydown = (event) =>  {\r\n        if(event && event.keyCode && \r\n            event.keyCode === Number(this.props.padValues.keycode)) \r\n        {\r\n            this.playSound();\r\n            \r\n        };\r\n    };\r\n\r\n    playSound = () => {\r\n        const audio = document.getElementById(this.props.padValues.key);\r\n        audio.currentTime = 0;\r\n        var playPromise = audio.play();\r\n\r\n        if(playPromise !== undefined) {\r\n            playPromise.then(_ =>{\r\n                playPromise.pause();\r\n            })\r\n            .catch(error => {});\r\n        }\r\n        this.props.updateDisplayText(this.props.padValues.text);\r\n        this.activatePad();\r\n    };\r\n\r\n    activatePad = () => {\r\n        this.setState({\r\n            padColor: '#eee4da'\r\n        });\r\n\r\n        setTimeout(() => this.setState({\r\n            padColor: '#eee4da59'\r\n        }), 100);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div style={{backgroundColor:this.state.padColor}} className='drum-pad' onClick={this.playSound} id={this.props.padValues.source}>\r\n                {this.props.padValues.key}\r\n                <audio id={this.props.padValues.key} className='clip' src={'drum-machine/'+ this.props.padValues.source}></audio>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport DrumPad from './DrumPad';\r\n\r\n\r\nexport default class DrumPadContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.displayTextCallback = this.displayTextCallback.bind(this);\r\n    }\r\n    displayTextCallback = (textFromDrumPad) => {\r\n        this.props.updateText(textFromDrumPad);\r\n    };\r\n\r\n    render() {\r\n        let drumPads = this.props.bank.map(el => <DrumPad updateDisplayText={this.displayTextCallback} id={el.key} key={el.key} padValues={el}/>)\r\n\r\n        return (\r\n            <div id='drum-pad-container'>\r\n                {drumPads}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function Display(props) {\r\n    return <div id='display'>{props.displayText}</div>;\r\n}","import React from 'react';\r\nimport DrumPadContainer from './components/DrumPadContainer';\r\nimport Display from './components/Display';\r\nimport audioLibrary from './audio_library';\r\nimport './stylesheets/main.css';\r\n\r\n\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bank: audioLibrary,\r\n      displayText: \"\"\r\n    }\r\n    this.updateDisplayText = this.updateDisplayText.bind(this);\r\n  }\r\n\r\n  updateDisplayText = (text)=> {\r\n    this.setState({\r\n      displayText: text\r\n    });\r\n\r\n    setTimeout(() => this.setState({\r\n      displayText: \"\"\r\n  }), 1000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div id='drum-machine'>\r\n      <Display displayText={this.state.displayText}/>\r\n      <DrumPadContainer updateText={this.updateDisplayText} bank={audioLibrary}/>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}