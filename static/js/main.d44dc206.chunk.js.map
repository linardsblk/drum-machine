{"version":3,"sources":["components/Switch.js","components/DrumPad.js","components/DrumPadContainer.js","components/Display.js","components/Volume.js","components/Controls.js","App.js","serviceWorker.js","index.js"],"names":["style","DrumPad","props","handleKeydown","event","switchOn","keyCode","Number","padValues","keycode","playSound","audio","document","getElementById","key","currentTime","volume","playPromise","play","undefined","then","_","pause","catch","error","updateText","text","activatePad","setState","padColor","setTimeout","state","bind","addEventListener","this","removeEventListener","backgroundColor","className","onClick","id","source","src","React","Component","DrumPadContainer","drumPads","bank","map","el","Display","displayText","Switch","setStyle","float","updateSwitch","Volume","handleVolume","updateVolume","target","value","onChange","type","min","max","volumeLevel","Controls","App","updateDisplayText","timeoutMs","localStorage","setItem","storedVolume","storedSwitchOn","getItem","parseInt","audioLibrary","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d44dc206.chunk.js","sourcesContent":["import React from \"react\";\r\nvar style;\r\nexport default class Switch extends React.Component {\r\n\tsetStyle = () => {\r\n\t\tif (this.props.switchOn) {\r\n\t\t\tstyle = {\r\n\t\t\t\tfloat: \"right\",\r\n\t\t\t\tbackgroundColor: \"#4CAF50\"\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyle = {\r\n\t\t\t\tbackgroundColor: \"#776e65\"\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\tthis.setStyle();\r\n\t\treturn (\r\n\t\t\t<div className=\"switch-wrap\" onClick={this.props.updateSwitch}>\r\n\t\t\t\t<div style={style} className=\"switch\"></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class DrumPad extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tpadColor: \"#eee4da59\"\r\n\t\t};\r\n\t\tthis.handleKeydown = this.handleKeydown.bind(this);\r\n\t\tthis.playSound = this.playSound.bind(this);\r\n\t\tthis.activatePad = this.activatePad.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tdocument.addEventListener(\"keydown\", this.handleKeydown, false);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tdocument.removeEventListener(\"keydown\", this.handleKeydown, false);\r\n\t}\r\n\r\n\thandleKeydown = event => {\r\n\t\tif (this.props.switchOn === true) {\r\n\t\t\tif (\r\n\t\t\t\tevent &&\r\n\t\t\t\tevent.keyCode &&\r\n\t\t\t\tevent.keyCode === Number(this.props.padValues.keycode)\r\n\t\t\t) {\r\n\t\t\t\tthis.playSound();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tplaySound = () => {\r\n\t\tif (this.props.switchOn) {\r\n\t\t\tconst audio = document.getElementById(this.props.padValues.key);\r\n            audio.currentTime = 0;\r\n            audio.volume = this.props.volume / 100;\r\n\t\t\tvar playPromise = audio.play();\r\n\r\n\t\t\tif (playPromise !== undefined) {\r\n\t\t\t\tplayPromise\r\n\t\t\t\t\t.then(_ => {\r\n\t\t\t\t\t\tplayPromise.pause();\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {});\r\n\t\t\t}\r\n\t\t\tthis.props.updateText(this.props.padValues.text);\r\n\t\t\tthis.activatePad();\r\n\t\t}\r\n\t};\r\n\r\n\tactivatePad = () => {\r\n\t\tthis.setState({\r\n\t\t\tpadColor: \"#eee4da\"\r\n\t\t});\r\n\r\n\t\tsetTimeout(\r\n\t\t\t() =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tpadColor: \"#eee4da59\"\r\n\t\t\t\t}),\r\n\t\t\t100\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={{ backgroundColor: this.state.padColor }}\r\n\t\t\t\tclassName=\"drum-pad\"\r\n\t\t\t\tonClick={this.playSound}\r\n\t\t\t\tid={this.props.padValues.source}\r\n\t\t\t>\r\n\t\t\t\t{this.props.padValues.key}\r\n\t\t\t\t<audio\r\n\t\t\t\t\tid={this.props.padValues.key}\r\n\t\t\t\t\tclassName=\"clip\"\r\n\t\t\t\t\tsrc={this.props.padValues.source}\r\n\t\t\t\t></audio>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport DrumPad from \"./DrumPad\";\r\n\r\nexport default class DrumPadContainer extends React.Component {\r\n\r\n\trender() {\r\n\t\tlet drumPads = this.props.bank.map(el => (\r\n\t\t\t<DrumPad\r\n                volume={this.props.volume}\r\n\t\t\t\tswitchOn={this.props.switchOn}\r\n\t\t\t\tupdateText={this.props.updateText}\r\n\t\t\t\tid={el.key}\r\n\t\t\t\tkey={el.key}\r\n\t\t\t\tpadValues={el}\r\n\t\t\t/>\r\n\t\t));\r\n\t\treturn <div id=\"drum-pad-container\">{drumPads}</div>;\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Display(props) {\r\n\treturn <div id=\"display\">{props.displayText}</div>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Volume extends React.Component {\r\n    handleVolume = event => {\r\n        this.props.updateVolume(event.target.value);\r\n    }\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<input className='volume-slider'\r\n\t\t\t\tonChange={this.handleVolume}\r\n\t\t\t\ttype=\"range\"\r\n\t\t\t\tmin=\"0\"\r\n\t\t\t\tmax=\"100\"\r\n\t\t\t\tvalue={this.props.volumeLevel}\r\n\t\t\t></input>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport Switch from \"./Switch\";\r\nimport Volume from \"./Volume\";\r\n\r\nexport default class Controls extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"controls\">\r\n\t\t\t\t<Switch\r\n\t\t\t\t\tswitchOn={this.props.switchOn}\r\n\t\t\t\t\tupdateSwitch={this.props.updateSwitch}\r\n\t\t\t\t/>\r\n\t\t\t\t<Volume\r\n\t\t\t\t\tvolumeLevel={this.props.volumeLevel}\r\n\t\t\t\t\tupdateVolume={this.props.updateVolume}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\r\nimport DrumPadContainer from \"./components/DrumPadContainer\";\r\nimport Display from \"./components/Display\";\r\nimport Controls from \"./components/Controls\";\r\nimport audioLibrary from \"./audio_library\";\r\nimport \"./stylesheets/main.css\";\r\n\r\nexport default class App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tvar storedVolume = 50;\r\n\t\tvar storedSwitchOn = false;\r\n\r\n\t\tif (localStorage.getItem(\"volume\")) {\r\n\t\t\tstoredVolume = parseInt(localStorage.getItem(\"volume\"));\r\n\t\t}\r\n\t\tif (localStorage.getItem(\"switchOn\")) {\r\n\t\t\tstoredSwitchOn = (localStorage.getItem(\"switchOn\") === \"true\")\r\n\t\t}\r\n\t\tthis.state = {\r\n\t\t\tbank: audioLibrary,\r\n\t\t\tdisplayText: \"\",\r\n\t\t\tswitchOn: storedSwitchOn,\r\n\t\t\tvolume: storedVolume\r\n\t\t};\r\n\t\tthis.updateDisplayText = this.updateDisplayText.bind(this);\r\n\t\tthis.updateSwitch = this.updateSwitch.bind(this);\r\n\t\tthis.updateVolume = this.updateVolume.bind(this);\r\n\t}\r\n\r\n\tupdateDisplayText = (text, timeoutMs = 1000) => {\r\n\t\tthis.setState({\r\n\t\t\tdisplayText: text\r\n\t\t});\r\n\r\n\t\tsetTimeout(\r\n\t\t\t() =>\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tdisplayText: \"\"\r\n\t\t\t\t}),\r\n\t\t\ttimeoutMs\r\n\t\t);\r\n\t};\r\n\r\n\tupdateSwitch = () => {\r\n\t\tthis.updateDisplayText(`Power: ${!this.state.switchOn ? \"On\" : \"Off\"}`);\r\n\t\tlocalStorage.setItem(\"switchOn\", !this.state.switchOn);\r\n\t\tthis.setState({\r\n\t\t\tswitchOn: !this.state.switchOn\r\n\t\t});\r\n\t};\r\n\r\n\tupdateVolume = volumeLevel => {\r\n\t\tthis.updateDisplayText(`Volume: ${volumeLevel}`);\r\n\t\tthis.setState({\r\n\t\t\tvolume: volumeLevel\r\n\t\t});\r\n\t\tlocalStorage.setItem(\"volume\", volumeLevel);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"drum-machine\">\r\n\t\t\t\t<Display displayText={this.state.displayText} />\r\n\t\t\t\t<Controls\r\n\t\t\t\t\tvolumeLevel={this.state.volume}\r\n\t\t\t\t\tupdateVolume={this.updateVolume}\r\n\t\t\t\t\tupdateSwitch={this.updateSwitch}\r\n\t\t\t\t\tswitchOn={this.state.switchOn}\r\n\t\t\t\t/>\r\n\t\t\t\t<DrumPadContainer\r\n\t\t\t\t\tvolume={this.state.volume}\r\n\t\t\t\t\tswitchOn={this.state.switchOn}\r\n\t\t\t\t\tupdateText={this.updateDisplayText}\r\n\t\t\t\t\tbank={audioLibrary}\r\n\t\t\t\t/>\r\n\t\t\t\t<div id=\"made-by\">\r\n\t\t\t\t\tMade by{\" \"}\r\n\t\t\t\t\t<a href=\"https://github.com/linardsblk/drum-machine\">\r\n\t\t\t\t\t\tLinards\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}